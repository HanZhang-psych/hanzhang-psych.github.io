# Hugo Blox GitHub Action to convert Bibtex publications to Markdown-based webpages
name: Import Publications From Bibtex

# Require permission to create a PR
permissions:
  contents: write
  issues: write
  pull-requests: write

# Run workflow when a `.bib` file is added or updated in the root folder
on:
  push:
    branches: ['main']
    paths: ['*.bib']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  hugoblox:
    if: github.repository_owner != 'HugoBlox'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install academic==0.10.0
          pip install bibtexparser pyyaml
      - name: Import Journal Articles
        # Check if journal articles bib file exists
        if: ${{ hashFiles('journal_articles.bib') != '' }}
        run: academic import journal_articles.bib content/publication/ --compact
      - name: Import Preprints
        # Check if preprints bib file exists
        if: ${{ hashFiles('preprints.bib') != '' }}
        run: academic import preprints.bib content/publication/ --compact
      - name: Import Conference Papers
        # Check if conference papers bib file exists
        if: ${{ hashFiles('conference_papers.bib') != '' }}
        run: academic import conference_papers.bib content/publication/ --compact
      - name: Import Talks
        # Check if talks bib file exists
        if: ${{ hashFiles('talks.bib') != '' }}
        run: academic import talks.bib content/publication/ --compact
      - name: Import Publications (fallback for single file)
        # Check if single publications.bib file exists
        if: ${{ hashFiles('publications.bib') != '' }}
        run: academic import publications.bib content/publication/ --compact
      - name: Enhance publication metadata
        run: |
          cat > enhance_publications.py << 'EOF'
          import os
          import re
          import yaml
          import bibtexparser
          from pathlib import Path
          
          def load_bibtex_data():
              """Load all BibTeX files and create a lookup dictionary"""
              bib_data = {}
              
              # List of possible bib files
              bib_files = ['journal_articles.bib', 'preprints.bib', 'conference_papers.bib', 'talks.bib', 'publications.bib']
              
              for bib_file in bib_files:
                  if os.path.exists(bib_file):
                      print(f"Loading {bib_file}...")
                      with open(bib_file, 'r', encoding='utf-8') as f:
                          try:
                              bib_database = bibtexparser.load(f)
                              for entry in bib_database.entries:
                                  # Use ID as key, store full entry
                                  bib_data[entry['ID']] = entry
                          except Exception as e:
                              print(f"Error loading {bib_file}: {e}")
              
              return bib_data
          
          def convert_author_names(authors_list):
              """Convert plain text author names to author profile references"""
              if not authors_list:
                  return authors_list
              
              converted_authors = []
              for author in authors_list:
                  # Convert "Han Zhang" to "admin" for author highlighting
                  if author.strip() == "Han Zhang":
                      converted_authors.append("admin")
                  else:
                      converted_authors.append(author)
              
              return converted_authors
          
          def format_publication_field(entry):
              """Format publication field with volume, issue, pages"""
              entry_type = entry.get('ENTRYTYPE', '').lower()
              
              if entry_type == 'article':
                  # Journal article
                  journal = entry.get('journal', '')
                  volume = entry.get('volume', '')
                  number = entry.get('number', '')
                  pages = entry.get('pages', '')
                  
                  if journal:
                      pub_field = f"*{journal}*"
                      
                      # Add volume and issue
                      if volume:
                          if number:
                              pub_field += f", *{volume}*({number})"
                          else:
                              pub_field += f", *{volume}*"
                      
                      # Add pages
                      if pages:
                          # Convert LaTeX page ranges (--) to en-dash
                          pages = pages.replace('--', '-')
                          pub_field += f", {pages}"
                      
                      return pub_field
              
              elif entry_type == 'inproceedings' or entry_type == 'incollection':
                  # Conference paper or book chapter
                  booktitle = entry.get('booktitle', '')
                  if booktitle:
                      return f"In *{booktitle}*"
              
              elif entry_type == 'book':
                  # Book
                  publisher = entry.get('publisher', '')
                  if publisher:
                      return f"*{publisher}*"
              
              # Default fallback
              journal = entry.get('journal', '')
              booktitle = entry.get('booktitle', '')
              publisher = entry.get('publisher', '')
              
              if journal:
                  return f"*{journal}*"
              elif booktitle:
                  return f"In *{booktitle}*"
              elif publisher:
                  return f"*{publisher}*"
              
              return None
          

          def enhance_publication_files():
              """Enhance all publication markdown files"""
              bib_data = load_bibtex_data()
              
              if not bib_data:
                  print("No BibTeX data found!")
                  return
              
              pub_dir = Path('content/publication')
              if not pub_dir.exists():
                  print("No publication directory found!")
                  return
              
              enhanced_count = 0
              
              for pub_folder in pub_dir.iterdir():
                  if pub_folder.is_dir():
                      index_file = pub_folder / 'index.md'
                      if index_file.exists():
                          try:
                              # Read the markdown file
                              with open(index_file, 'r', encoding='utf-8') as f:
                                  content = f.read()
                              
                              # Split front matter and body
                              if content.startswith('---'):
                                  parts = content.split('---', 2)
                                  if len(parts) >= 3:
                                      front_matter = parts[1]
                                      body = parts[2] if len(parts) > 2 else ''
                                      
                                      # Parse YAML front matter
                                      try:
                                          data = yaml.safe_load(front_matter)
                                          
                                          # Try to find matching BibTeX entry
                                          # Look for entry by folder name or title
                                          folder_name = pub_folder.name
                                          title = data.get('title', '')
                                          
                                          matching_entry = None
                                          
                                          # First try to match by folder name pattern
                                          for bib_id, entry in bib_data.items():
                                              # Normalize both names for comparison (replace underscores and hyphens)
                                              normalized_bib_id = bib_id.lower().replace('_', '-').replace('-', '')
                                              normalized_folder = folder_name.lower().replace('_', '-').replace('-', '')
                                              
                                              # Try multiple matching strategies
                                              if (bib_id.lower() in folder_name.lower() or 
                                                  normalized_bib_id in normalized_folder or
                                                  folder_name.lower() in bib_id.lower()):
                                                  matching_entry = entry
                                                  break
                                          
                                          # If no match, try by title similarity
                                          if not matching_entry and title:
                                              for bib_id, entry in bib_data.items():
                                                  bib_title = entry.get('title', '').lower()
                                                  if bib_title and title.lower() in bib_title:
                                                      matching_entry = entry
                                                      break
                                          
                                          if matching_entry:
                                              # Format the publication field
                                              new_pub_field = format_publication_field(matching_entry)
                                               
                                              if new_pub_field:
                                                  # Update or add publication field
                                                  data['publication'] = new_pub_field
                                              
                                              # Convert author names for highlighting
                                              if 'authors' in data:
                                                  data['authors'] = convert_author_names(data['authors'])
                                               
                                              # Write back the file
                                              new_front_matter = yaml.dump(data, default_flow_style=False, allow_unicode=True)
                                              new_content = f"---\n{new_front_matter}---{body}"
                                               
                                              with open(index_file, 'w', encoding='utf-8') as f:
                                                  f.write(new_content)
                                               
                                              enhanced_count += 1
                                              print(f"Enhanced: {pub_folder.name}")
                                          else:
                                              # Even if no matching BibTeX entry, still convert author names
                                              if 'authors' in data:
                                                  data['authors'] = convert_author_names(data['authors'])
                                                  
                                                  # Write back the file with converted authors
                                                  new_front_matter = yaml.dump(data, default_flow_style=False, allow_unicode=True)
                                                  new_content = f"---\n{new_front_matter}---{body}"
                                                  
                                                  with open(index_file, 'w', encoding='utf-8') as f:
                                                      f.write(new_content)
                                                  
                                                  enhanced_count += 1
                                                  print(f"Enhanced authors: {pub_folder.name}")
                                              else:
                                                  print(f"No matching BibTeX entry found for: {pub_folder.name}")
                                      
                                      except yaml.YAMLError as e:
                                          print(f"YAML error in {index_file}: {e}")
                          
                          except Exception as e:
                              print(f"Error processing {index_file}: {e}")
              
              print(f"Enhanced {enhanced_count} publications with complete metadata!")
          
          if __name__ == "__main__":
              enhance_publication_files()
          EOF
          
          python enhance_publications.py
      - name: Create Pull Request
        # Set ID for `Check outputs` stage
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: 'content: import publications from Bibtex with enhanced metadata'
          title: Hugo Blox Builder - Import latest publications with volume/issue/pages
          body: |
            Import the latest publications from BibTeX files to `content/publication/` with enhanced metadata including:
            - Volume and issue numbers
            - Page ranges
            - Properly formatted publication fields
            
            将最新的出版物从BibTeX文件导入到`content/publication/`，包含增强的元数据。
            [View Documentation](https://github.com/GetRD/academic-file-converter)
          base: main
          labels: automated-pr, content
          branch: hugoblox-import-publications
          delete-branch: true
      - name: Check outputs
        if: ${{ steps.cpr.outputs.pull-request-number }}
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"
